// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using University_DB_Exam;

#nullable disable

namespace Student_Platform_DB_Exam.Migrations
{
    [DbContext(typeof(UniContext))]
    partial class UniContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FacultyLecture", b =>
                {
                    b.Property<Guid>("FacultyLecturesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LectureFacultiesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FacultyLecturesId", "LectureFacultiesId");

                    b.HasIndex("LectureFacultiesId");

                    b.ToTable("FacultyLecture");
                });

            modelBuilder.Entity("LectureStudent", b =>
                {
                    b.Property<Guid>("LectureStudentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentLecturesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LectureStudentsId", "StudentLecturesId");

                    b.HasIndex("StudentLecturesId");

                    b.ToTable("LectureStudent");
                });

            modelBuilder.Entity("Student_Platform_DB_Exam.Worker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FacultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WorkerFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkerLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkerPosition")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("University_DB_Exam.Faculty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FacultyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("University_DB_Exam.Lecture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LectureName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LectureWorkerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LectureWorkerId");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("University_DB_Exam.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StudentEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StudentFacultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StudentFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentLevel")
                        .HasColumnType("int");

                    b.Property<double?>("StudentScore")
                        .HasColumnType("float");

                    b.Property<int?>("StudentYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentFacultyId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("FacultyLecture", b =>
                {
                    b.HasOne("University_DB_Exam.Lecture", null)
                        .WithMany()
                        .HasForeignKey("FacultyLecturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("University_DB_Exam.Faculty", null)
                        .WithMany()
                        .HasForeignKey("LectureFacultiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LectureStudent", b =>
                {
                    b.HasOne("University_DB_Exam.Student", null)
                        .WithMany()
                        .HasForeignKey("LectureStudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("University_DB_Exam.Lecture", null)
                        .WithMany()
                        .HasForeignKey("StudentLecturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Student_Platform_DB_Exam.Worker", b =>
                {
                    b.HasOne("University_DB_Exam.Faculty", null)
                        .WithMany("FacultyWorkers")
                        .HasForeignKey("FacultyId");
                });

            modelBuilder.Entity("University_DB_Exam.Lecture", b =>
                {
                    b.HasOne("Student_Platform_DB_Exam.Worker", "LectureWorker")
                        .WithMany("WorkerLectures")
                        .HasForeignKey("LectureWorkerId");

                    b.Navigation("LectureWorker");
                });

            modelBuilder.Entity("University_DB_Exam.Student", b =>
                {
                    b.HasOne("University_DB_Exam.Faculty", "StudentFaculty")
                        .WithMany("FacultyStudents")
                        .HasForeignKey("StudentFacultyId");

                    b.Navigation("StudentFaculty");
                });

            modelBuilder.Entity("Student_Platform_DB_Exam.Worker", b =>
                {
                    b.Navigation("WorkerLectures");
                });

            modelBuilder.Entity("University_DB_Exam.Faculty", b =>
                {
                    b.Navigation("FacultyStudents");

                    b.Navigation("FacultyWorkers");
                });
#pragma warning restore 612, 618
        }
    }
}
